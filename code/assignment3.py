# -*- coding: utf-8 -*-
"""481-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/125zO428JyykZEIDnkoHT7wzDBjO5br2T
"""

import matplotlib.pyplot as plt, numpy as np, pandas as pd, scipy.linalg as la
from sklearn.manifold import TSNE
from sklearn.datasets import fetch_olivetti_faces

"""
---
# STEP 0: obtain train & test datasets

"""

#!gdown --id 1IFTFSDneLP4p_NEVfPPWpEob8JFqpBHn
#!gdown --id 1sWLYMNBFFdG4vAUBqP8NcDvEDawmJ2NQ

df_flat = pd.read_csv('mnist_train.csv')

"""---
# STEP 1: Plot 10 sample digit images per digit class

"""
###### STEP 1: Plot 10 sample digit images per digit class
sample_df = pd.DataFrame()
for i in range(10):
    sample_df = pd.concat([sample_df,df_flat[df_flat.label == i].sample(10)],axis=0)

fig, axs = plt.subplots(10, 10,sharex=True, sharey=True)
for i in range(10):
    for j in range(10):
        axs[i,j].axis('off')
        reshaped = np.reshape([sample_df.iloc[10*i+j][1:]], (28, 28))
        axs[i,j].imshow(reshaped,cmap='gray_r')
plt.show()
print(1)

"""---
# STEP 2:

## 2.1) plot the mean image
"""

mean_vector = df_flat.loc[:, df_flat.columns != 'label'].mean(axis=0)
reshaped = np.reshape([mean_vector], (28, 28))
plt.imshow(reshaped,cmap='gray_r')
plt.show()
df_centered = df_flat.loc[:, df_flat.columns != 'label'].sub(mean_vector, axis=1)

covariance_matrix = df_centered.cov()

eigenvalues, eigenvectors = la.eig(covariance_matrix)
eigenvectors = eigenvectors.transpose()

"""## 2.2) plot the top 100 eigenvectors"""

fig, axs = plt.subplots(10, 10,sharex=True, sharey=True)
for i in range(10):
    for j in range(10):
        axs[i,j].axis('off')
        reshaped = np.reshape([eigenvectors[10*i+j]], (28, 28))
        axs[i,j].imshow(reshaped,cmap='gray_r')
plt.show()

"""## 2.3) plot the top 100 eigenvalues"""

plt.plot(eigenvalues[:50], 'o-', linewidth=2, color='blue')
plt.xlabel('Scree Plot (Largest 50 eigenvalues).')
plt.show()

"""
---
# STEP 3: Plot the digits in 2D

"""

### Plot the digits in 2D
df_test_flat = pd.read_csv('mnist_test.csv')
df_test_flat.info

mean_vector = df_test_flat.loc[:, df_test_flat.columns != 'label'].mean(axis=0)
df_test_centered = df_test_flat.loc[:, df_test_flat.columns != 'label'].sub(mean_vector, axis=1)
covariance_matrix_test = df_test_centered.cov()
eigenvalues_test, eigenvectors_test = la.eig(covariance_matrix)
eigenvectors_test = eigenvectors_test.transpose()

max_two_eigenvectors = pd.DataFrame(eigenvectors_test[:2])
projectioned = pd.DataFrame([np.dot(max_two_eigenvectors, df_test_centered.iloc[i]) for i in range(len(df_test_centered))])

scatter = plt.scatter(projectioned[0], projectioned[1], c=df_test_flat["label"], vmin=min(df_test_flat["label"]), vmax=max(df_test_flat["label"]), cmap='tab20')
plt.legend(handles=scatter.legend_elements()[0], labels=[i for i in range(10)])
plt.show()

"""---
# STEP 4: Use t-SNE to visualize MNIST test set

"""

X_embedded = pd.DataFrame(TSNE(n_components=2, learning_rate='auto',init='random').fit_transform(df_test_flat))

scatter = plt.scatter(X_embedded[0], X_embedded[1], c=df_test_flat["label"], vmin=min(df_test_flat["label"]), vmax=max(df_test_flat["label"]), cmap='tab20')
plt.legend(handles=scatter.legend_elements()[0], labels=[i for i in range(10)])
plt.show()

"""---
# STEP 5: Reconstruct two images using the PCA approach with different number of eigenvectors

## 5.1) Digit image
"""

reconstructed_list = []
sample_digit = df_centered.sample(1)
for i in range(2,784,10):
    projectioned_sample_digit = pd.DataFrame(np.dot(sample_digit, pd.DataFrame( eigenvectors[:i]).transpose()))
    reconstructed_list.append(np.add(np.dot(projectioned_sample_digit, pd.DataFrame(eigenvectors[:i])), np.array(mean_vector.transpose())))

fig, axs = plt.subplots(9, 9,sharex=True, sharey=True)
for i in range(9):
    for j in range(9):
        axs[i,j].axis('off')
        if i == 8 and j>6:
            continue
        reshaped = np.reshape([reconstructed_list[9*i+j]], (28, 28))
        axs[i,j].imshow(reshaped,cmap='gray_r')
        axs[i,j].annotate(int(sum([x.real for x in eigenvalues[:2+10*(10*i+j)]])/sum([x.real for x in eigenvalues])*100),(i,j))
plt.show()

"""---
# STEP 6: FACE DATASET

## 6.0) READ DATASET
"""

faces, classes = fetch_olivetti_faces(return_X_y=True)
df_faces = pd.DataFrame(faces)

"""## 6.1) Plot 2 sample face images per face class

"""

sample_faces = pd.DataFrame()
for i in range(40):
    sample_faces = sample_faces.append(df_faces.iloc[10*i:10*(i+1)].sample(2))

fig, axs = plt.subplots(8, 10,sharex=True, sharey=True)
for i in range(8):
    for j in range(10):
        axs[i,j].axis('off')
        reshaped = np.reshape([sample_faces.iloc[10*i+j]], (64, 64))
        axs[i,j].imshow(reshaped,cmap='gray')
fig.suptitle('2 samples per each class')
plt.show()

"""## 6.2)

### 6.2.1) Mean Face
"""

plt.figure()
mean_faces = df_faces.loc[:].mean(axis=0)
reshaped_mean_face = np.reshape([mean_faces], (64, 64))
plt.title('mean face')
plt.imshow(reshaped_mean_face,cmap='gray')
plt.show()

"""### 6.2.2) Largest 100 eigenvectors"""

df_faces_centered = df_faces.loc[:].sub(mean_faces, axis=1)
covariance_matrix_faces = df_faces_centered.cov()
eigenvalues_face, eigenvectors_face = la.eig(covariance_matrix_faces)
eigenvectors_face = eigenvectors_face.transpose()

fig, axs = plt.subplots(10, 10,sharex=True, sharey=True)
for i in range(10):
    for j in range(10):
        axs[i,j].axis('off')
        reshaped = np.reshape([x.real for x in eigenvectors_face[10*i+j]], (64, 64))
        axs[i,j].imshow(reshaped,cmap='gray')
plt.show()
"""### 6.2.3) Largest 50 eigenvalues"""

plt.plot(eigenvalues_face[:50], 'o-', linewidth=2, color='blue')
plt.xlabel('Scree Plot (Largest 50 eigenvalues).')
plt.show()

"""## 6.3) Plot the faces in 2D"""

max_two_eigenvectors_face = pd.DataFrame(eigenvectors_face[:2])
projectioned_faces = pd.DataFrame([np.dot(max_two_eigenvectors_face, df_faces_centered.iloc[i]) for i in range(len(df_faces_centered))])

plt.figure()
scatter = plt.scatter(projectioned_faces[0], projectioned_faces[1], c=classes, vmin=min(classes), vmax=max(classes), cmap='tab20')
plt.legend(handles=scatter.legend_elements()[0], labels=[x for x in range(40)])
plt.show()

"""## 6.4) Use t-SNE to visualize face set

"""

X_embedded_face = pd.DataFrame(TSNE(n_components=2, learning_rate='auto',init='random').fit_transform(df_faces))

plt.figure()
scatter = plt.scatter(X_embedded_face[0], X_embedded_face[1], c=classes, vmin=min(classes), vmax=max(classes), cmap='tab20')
plt.legend(handles=scatter.legend_elements()[0], labels=[i for i in range(40)])
plt.show()

"""## 6.5) Reconstruct two images using the PCA approach with different number of eigenvectors"""

reconstructed_face_list = []
sample_face = df_faces_centered.sample(1)
for i in range(2,784,10):
    projectioned_sample_face = pd.DataFrame(np.dot(sample_face, pd.DataFrame( eigenvectors_face[:i]).transpose()))
    reconstructed_face_list.append(np.add(np.dot(projectioned_sample_face, pd.DataFrame(eigenvectors_face[:i])), np.array(mean_faces.transpose())))

fig, axs = plt.subplots(9, 9,sharex=True, sharey=True)
for i in range(9):
    for j in range(9):
        axs[i,j].axis('off')
        if i == 8 and j>6:
            continue
        reshaped = np.reshape([x.real for x in reconstructed_face_list[9*i+j]], (64, 64))
        axs[i,j].imshow(reshaped,cmap='gray')
        axs[i,j].annotate(int(sum([x.real for x in eigenvalues_face[:2+10*(10*i+j)]])/sum([x.real for x in eigenvalues_face])*100),(i,j))
plt.show()